[
{
	"uri": "https://visheyra.github.io/MalEx-doc/isomorphism-detection/the-vf2-algorithm/",
	"title": "The VF2 Algorithm",
	"tags": [],
	"description": "",
	"content": " Algorithm The VF algorithm is an improvement of the VF algorithm. The application of this algorithm is to detect isomorphism and subgraph isomorphism. The improvement of VF2 is the requirement of a lower complexity (from O(N^2) to O(N))\nHow does it works This algorithm implements a naive detection of isomorphism. In fact, it tries to map every node in a graph G into another graph G\u0026rsquo;. This algorithm proceed node per node and\nExample For a given graph G composed of 3 nodes {n1, n2, n3} and 2 edges {e1, e2}. With e1 links together n1 and n2, e2 links together n2 and n3. And for another given graph G' composed of 3 nodes {n1', n2', n3'} with 2 edges {e1', e2'}. e1' links together n1' and n2' and e2' links together n1' and n3'.\nBelow are the resolution steps to determine if G and G' are isomorphic\n   Step Explanation Math     1 match empty G with empty G\u0026rsquo; G{} \u0026lt;=\u0026gt; G\u0026rsquo;{}   2 define which which node in G\u0026rsquo; n1 can match n1 \u0026lt;=\u0026gt; n1' or n2' or n3'   3 match n1 and n1' n1 \u0026lt;=\u0026gt; n1\u0026rsquo;   4 define which which node in G\u0026rsquo; n2 can match n2 \u0026lt;=\u0026gt; n2 or n3   5 match n2 and n2' n2 \u0026lt;=\u0026gt; n2\u0026rsquo;   6 define which node n3 match in G\u0026rsquo; n3 \u0026lt;=\u0026gt; {}   7 we can\u0026rsquo;t match n3 so we fall back to step 3 n3 \u0026lt;=\u0026gt; {}   8 n1 match n2' n1 \u0026lt;=\u0026gt; n2\u0026rsquo;   9 define which remaining nodes in G\u0026rsquo; can match n2 n2 \u0026lt;=\u0026gt; {n1\u0026rsquo;, n3\u0026rsquo;}   10 match n2 with n1\u0026rsquo; n2 \u0026lt;=\u0026gt; n1\u0026rsquo;   11 define which node can be matched no n3 n3 \u0026lt;=\u0026gt; {n3\u0026rsquo;}   12 match n3 and n3` n3 \u0026lt;=\u0026gt; n3\u0026rsquo;   13 all nodes in G and G\u0026rsquo; are mapped G \u0026lt;=\u0026gt; G\u0026rsquo; or {n1, n2, n3} \u0026lt;=\u0026gt; {n2\u0026rsquo;, n1\u0026rsquo;, n3\u0026rsquo;}   14 G and G\u0026rsquo; are Isomorphic *    "
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/abstraction/control-flow-recovery/",
	"title": "Control Flow Recovery",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "This section will teach you the minimal to understand the concept of MalEx, how to install it and how to use it.\n What is MalEx Install Usage  "
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/basics/what-is-malex/",
	"title": "What Is Malex",
	"tags": [],
	"description": "",
	"content": " MalEx MalEx is tool which aim to translate a binary to an abstract representation which will be used for further processing and perform naive isomorphism detection.\nHow does it works MalEx extracts the following information from binaries:\n Function Calling Graph of the whole program Control Flow Graph of each function defined in the binary Value set of each register for each logic block in a function Assembly instructions  Once these informations has been extracted, the data is structured in a yaml file which can later be analysed by other solutions.\n"
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/isomorphism-detection/program-level-isomorphism-detection/",
	"title": "Program Level Isomorphism Detection",
	"tags": [],
	"description": "",
	"content": " Idea The idea behind program level detection is simple. In MalEx it means that once the control flow graph of a binary is recovered, it can be compared to such graphs from other binaries through the VF2 algorithm.\nExamples soon\n"
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/abstraction/value-set-analysis/",
	"title": "Value Set Analysis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/basics/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": " Install MalEx is a python project which uses python2. In order to run properly malex need to be run in a virtualenv. You can find below all the instruction to install MalEx in a virtualenv\nRequirements The following programs needs to be installed in order to install and run MalEx\n Python 2.7 Virtualenv  Step by step  Go to the root of the directory execute command virtualenv -p /path/to/python2 $some_name enter the virtualenv with source $some_name/bin/activate execute command pip2 install -r requirements.txt everything will work fine by now  Dependancies    package usage link     angr reverse engineering framework angr   angrutils export visual representation of resources extracted by angr angrutils   networkx manipulation, study of structures and dynamics of complex networks also used by angr networkx   coloredlogs fancy logger coloredlogs    "
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/isomorphism-detection/function-level-isomorphism-detection/",
	"title": "Function Level Isomorphism Detection",
	"tags": [],
	"description": "",
	"content": " Idea The idea behind function level detection is simple. In MalEx it means that every functions symbol that can be extracted from a binary will be compared. In a first time, the control flow of the symbols are extracted as DiGraph\u0026rsquo;s. Those DiGraph are then matched one against each using VF2 Algorithm to detect Isomorphism.\nExamples soon\n"
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/abstraction/function-call-graph/",
	"title": "Function Call Graph",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/basics/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": " MalEx is an utility which is run from the command line.\nOptions    options switch usage     help -h Show help   binaries -b List of the binaries\u0026rsquo; path   shared -s allow the loading of shared resources (would take much more time)   match -m Determine function isomorphism accross the binaries loaded    Examples  Run MalEx on multiple binaries:  app/app.py -b path/to/binary path/to/other/binary   Run MalEx with sideloading of shared dependancies  app/app.py -b path/to/binary path/to/other/binary -s  "
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/abstraction/instructions/",
	"title": "Instructions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/abstraction/representation/",
	"title": "Representation",
	"tags": [],
	"description": "",
	"content": " What\u0026rsquo;s inside soon\nHow the dependancies works. This tool generate representation of binaries using YAML meta language. Three type of assets can be generated.\nThe header file File containing all the resources that can be loaded for a particular binary.\nexample:\nfile: binary_test arch: AMD64 metas: - something - something_else artefacts: - name: main filename: main.yaml symbol_name: main - name: call filename: call.yaml symbol_name: main  The function file File containing all the informations that belongs to a particular symbol within a binary.\nmain: metas: start: 0x4006ae # offset of the function size: 2 # number of nodes in the graph nodes: # list of the logic blocks of the function - step: 0 # ofsset in byte to the entry of the function links: # list of the call targets of the logic block call target as expressed as labeled func in header file - call instructions: # instructions in the logic block - PUSH RBP - MOV RBP, RSP regs: # VSA of the logic block (link for VSA below) - name: RAX set: min: 0 max: 7 - name: RDI set: min: 14 max: 28 - step: 11 instructions: - POP RDI - RET regs: - name: RDI set: min: -4 max: 13  The function calling graph file File containing a finite automata which represents the Function Calling Graph of a program\nfile: binary_test_other graph: - name: func1 offset: 0xDEADC0DE callers: - func1 - func3 callees: - func2 - name: func2 offset: 0xBADBEEF callers: - func1 - name: func3 offset: 0xBADC0FFEE callees: - func1  "
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Malex Binary abstractor\n"
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " MalEx What is MalEx MalEx is tool which aim to translate a binary to an abstract representation which will be used for further processing and perform naive isomorphism detection.\nHow does it works MalEx extracts the following information from binaries:\n Function Calling Graph of the whole program Control Flow Graph of each function defined in the binary Value set of each register for each logic block in a function Assembly instructions Assembly instructions translated to the Vex language  Once these informations has been extracted, the data is structured in a yaml file which can later be analysed by other solutions.\nIsomorphism detection This feature has been added as an improvement. The functioan\n"
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/abstraction/",
	"title": "Abstractions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/isomorphism-detection/",
	"title": "Isomorphism Detections",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://visheyra.github.io/MalEx-doc/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]